generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map("compound_id")
  userId             Int       @map("user_id")
  providerType       String    @map("provider_type")
  providerId         String    @map("provider_id")
  providerAccountId  String    @map("provider_account_id")
  refreshToken       String?   @map("refresh_token")
  accessToken        String?   @map("access_token")
  accessTokenExpires DateTime? @map("access_token_expires")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @default(now()) @map("updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  expires      DateTime
  sessionToken String   @unique @map("session_token")
  accessToken  String   @unique @map("access_token")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")

  @@map("sessions")
}

model User {
  id              Int            @id @default(autoincrement())
  name            String?
  email           String?        @unique
  emailVerified   DateTime?      @map("email_verified")
  image           String?
  skill           String?
  timezone        String?
  biogram         String?
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @default(now()) @map("updated_at")
  profilesChecked ProfileCheck[] @relation("ProfilesChecked")
  targetChecks    ProfileCheck[] @relation("TargetProfiles")
  filter          Filter?

  ConversationUser    ConversationUser[]
  ConversationMessage ConversationMessage[]
  @@map("users")
}

model Filter {
  id       Int     @id @default(autoincrement())
  skill    String?
  timezone String?

  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("filters")
}

model ProfileCheck {
  id         Int      @id @default(autoincrement())
  user       User     @relation("ProfilesChecked", fields: [userId], references: [id])
  userId     Int      @map("user_id")
  targetUser User     @relation("TargetProfiles", fields: [targetId], references: [id])
  targetId   Int      @map("target_id")
  liked      Boolean  @default(false)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")

  @@map("profile_checks")
}

model Conversation {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  users    ConversationUser[]
  messages ConversationMessage[]

  @@map("conversations")
}

model ConversationUser {
  id             Int          @id @default(autoincrement())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId Int          @map("conversation_id")
  user           User         @relation(fields: [userId], references: [id])
  userId         Int          @map("user_id")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @default(now()) @map("updated_at")

  @@map("conversation_users")
}

model ConversationMessage {
  id             Int          @id @default(autoincrement())
  content        String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId Int          @map("conversation_id")
  user           User         @relation(fields: [userId], references: [id])
  userId         Int          @map("user_id")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @default(now()) @map("updated_at")

  @@map("conversation_messages")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")

  @@map("verification_requests")
}

model Skill {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("skills")
}

model Timezone {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("timezones")
}
